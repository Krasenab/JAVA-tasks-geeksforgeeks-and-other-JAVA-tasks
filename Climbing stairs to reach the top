// Task : There are n stairs, and a person standing at the bottom wants to climb stairs to reach the top. The person can climb either 1 stair or 2 stairs at a time, the task is to count the number of ways that a person can reach at the top.

//Note: This problem is similar to Count ways to reach Nth stair (Order does not matter) with the only difference that in this problem, we count all distinct ways where different orderings of the steps are considered unique.
// Climbing is for recursion solution . Big Climbing is for DP (Tabulation)

import java.util.Scanner;
import java.util.Arrays;
public class Main
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		int a = sc.nextInt();
		int  b = BigClimbing(a);
		System.out.print(b);
	}
	public static int Climbing(int n)
	{
	    if(n == 0)
	    { 
	        return 0;
	        
	    }
	    else if(n==1)
	    {
	        return 1;
	    }
	    else if(n==2)
	    {
	        return 2;
	    }
	    else if(n>32)
	    {
	        System.out.print("Use Big Climbing method.");
	        return -1;
	         
	    }
	    return Climbing(n-1)+Climbing(n-2);
	    
	}
    public static int BigClimbing(int n)
    {
       int[] dp = new int[n+1]; //n+1 for we have space to save our final result on n+1 index;
       dp[1] = 1;
       dp[2] = 2; 
       
       for(int a=3;a<=n;a++)
       {
           dp[a] = dp[a-1] + dp[a-2]; //i=3  dp[3] = 2(dp[a-1]) + 1(dp[a-2]) = 3
                                    // i = 4 dp[4] = 3(dp[a-1](4-1)) +  2 (dp[a-2](4-2)) = 5
                                    
                                   
         
       }
        return dp[n]; 
    }
}





